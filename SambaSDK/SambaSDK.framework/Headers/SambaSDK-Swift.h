// Generated by Apple Swift version 4.1 (swiftlang-902.0.48 clang-902.0.37.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SambaSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

enum AdState : NSInteger;
@protocol AdManagerProtocol;
@class UIViewController;

/// Class which provides a full-screen ad at certain points in your application.
/// It is recommended to implement the <code>AdManagerProtocol</code> in order to be notified about different
/// events that might be triggered during the playing of the ad, such as when the ad has successfully been loaded and is ready
/// to be shown or something went wrong.
SWIFT_CLASS("_TtC8SambaSDK9AdManager")
@interface AdManager : NSObject
/// The state indicating whether the ad is ready to load, in the progress of loading, ready to show or already showing.
/// Before performing operations for an ad, it is recommended that you check if the state is appropiate.
/// The following restrictions apply:
/// <ul>
///   <li>
///     loadAd works only when adManager is in state readyToLoad
///   </li>
///   <li>
///     showAd works only when adManager is in readyToShow state
///   </li>
/// </ul>
@property (nonatomic, readonly) enum AdState state;
/// The delegate object of the <code>AdManagerProtocol</code>
@property (nonatomic, weak) id <AdManagerProtocol> _Nullable delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// Call this method to request the ad from the server.
/// It is advised to call this method in advance so you have the ad ready to be displayed instantly.
/// <h3>Usage example:</h3>
/// \code
/// self.adManager.loadAd()
///
/// \endcode
- (void)loadAd;
/// Call this method when you want to present modally an ad.
/// This method will present an ad only if the <code>isReady</code> property is true.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     viewController: the view controller which will present the ad
///   </li>
/// </ul>
/// <h3>Usage example:</h3>
/// \code
/// self.adManager.show(from: self)
///
/// \endcode
- (void)showAdFrom:(UIViewController * _Nonnull)viewController;
@end

/// Enum for the states that the AdManager can be in.
typedef SWIFT_ENUM(NSInteger, AdState) {
  AdStateReadyToLoad = 0,
  AdStateLoading = 1,
  AdStateReadyToShow = 2,
  AdStateShowing = 3,
};



@class SambaError;

/// Protocol to be implemented by the delegate
/// object of <code>AdManager</code>
SWIFT_PROTOCOL("_TtP8SambaSDK17AdManagerProtocol_")
@protocol AdManagerProtocol
@optional
/// Called when an ad has successfully been loaded
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     adManager: the AdManager object which sends the message.
///   </li>
/// </ul>
- (void)sambaAdDidLoad:(AdManager * _Nonnull)adManager;
/// Called when there was an error loading the ad.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     adManager: the AdManager object which sends the message.
///   </li>
///   <li>
///     error: the error encountered.
///   </li>
/// </ul>
- (void)sambaAd:(AdManager * _Nonnull)adManager didFailToLoad:(SambaError * _Nonnull)error;
/// Called exactly after the ad appeared.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     adManager: the AdManager object which sends the message.
///   </li>
/// </ul>
- (void)sambaAdDidAppear:(AdManager * _Nonnull)adManager;
/// Called exactly after the ad disappeared.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     adManager: the AdManager object which sends the message.
///   </li>
/// </ul>
- (void)sambaAdDidDisappear:(AdManager * _Nonnull)adManager;
/// Called when the user has watched the ad until the end, the add was skipped or the ad play failed due to no/poor internet connection.
/// If you want to reward the user for watching an ad, this might be a good place to do it.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     adManager: the adManager object which sends the message
///   </li>
///   <li>
///     didReachEnd: specifies if the ad was played successfully until the end or not
///   </li>
/// </ul>
- (void)sambaAd:(AdManager * _Nonnull)adManager didReachEnd:(BOOL)adCompleted;
/// Called when the user’s age is under 18 and all the ads are ageRestricted.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     adManager: the adManager object which sends the message
///   </li>
/// </ul>
- (void)ageRestrictionNotMet:(AdManager * _Nonnull)adManager;
@end

/// Class that configures the target of the ads.
typedef SWIFT_ENUM(NSInteger, Gender) {
  GenderMale = 0,
  GenderFemale = 1,
  GenderUnknown = 2,
};

/// Class which provides different configurations used by the SDK.
typedef SWIFT_ENUM(NSInteger, Orientation) {
  OrientationAuto = 0,
  OrientationPortrait = 1,
  OrientationLandscape = 2,
  OrientationMatchVideo = 3,
};


/// The SDK Info.
/// It holds the info about the sdk (eg. versions, naming etc).
SWIFT_CLASS("_TtC8SambaSDK7SDKInfo")
@interface SDKInfo : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class SambaSetup;
@class VideoConfig;
@class Target;

/// This is the main class for SambaSDK.
SWIFT_CLASS("_TtC8SambaSDK5Samba")
@interface Samba : NSObject
/// The singleton instance of AdManager.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) AdManager * _Null_unspecified adManager;)
+ (AdManager * _Null_unspecified)adManager SWIFT_WARN_UNUSED_RESULT;
+ (void)setAdManager:(AdManager * _Null_unspecified)value;
/// This method has to be called in order to configure the SambaSDK.
/// Parameters:
/// setup - Check SambaSetup class for more details.
/// videoConfig - Check VideoConfig class for more details. (this parameter is optional)
/// target - Check Target class for more details. (this parameter is optional)
+ (void)configureWithSetup:(SambaSetup * _Nonnull)setup videoConfig:(VideoConfig * _Nullable)videoConfig target:(Target * _Nullable)target;
/// This method can be called to clear the cache.
/// It is not necessarily to be called, as the cache is automatically cleared after some time.
+ (void)clearCache;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSCoder;

SWIFT_CLASS("_TtC8SambaSDK10SambaError")
@interface SambaError : NSError
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end




/// An instance of this class has to be created in order to use the SDK.
SWIFT_CLASS("_TtC8SambaSDK10SambaSetup")
@interface SambaSetup : NSObject
/// Parameters:
/// <ul>
///   <li>
///     userId - GUID, needs to be unique for each user.
///   </li>
///   <li>
///     publisherId - the publisher id you received from Samba.
///   </li>
///   <li>
///     secretKey - the secret key you received from Samba.
///   </li>
/// </ul>
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId publisherId:(NSInteger)publisherId secretKey:(NSString * _Nonnull)secretKey OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC8SambaSDK6Target")
@interface Target : NSObject
/// The user’s gender.
@property (nonatomic) enum Gender gender;
/// The user’s age.
@property (nonatomic) NSInteger age;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end








SWIFT_CLASS("_TtC8SambaSDK11VideoConfig")
@interface VideoConfig : NSObject
- (nonnull instancetype)initWithScreenOrientation:(enum Orientation)screenOrientation soundEnabled:(BOOL)soundEnabled optimizeDownloadOnMobileData:(BOOL)optimizeDownloadOnMobileData OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
